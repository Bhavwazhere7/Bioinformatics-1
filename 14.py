# Find a Profile-most probable k-mer in a string.

def all_poss_kmer (seq,k):
    kmer_arr = []
    for i in range(0,len(seq)):
        new_seq = seq[i:i+k]
        if len(new_seq) == k:
            kmer_arr.append(new_seq)
    return kmer_arr

def most_probable (seq, k, matrix):
    kmer_arr = all_poss_kmer(seq,k)
    dic_kmer = {}
    probable = []
    for kmer in kmer_arr:
        # print(kmer)
        score = 1
        for i in range(0,k):
            #  print(matrix[kmer[i]][i])
             score *= matrix[kmer[i]][i]
        dic_kmer[kmer] = score
    for key in dic_kmer:
        if dic_kmer[key] == max(dic_kmer.values()):
            probable.append(key)
    # print(dic_kmer)
    return probable

input = "TTCTATAGAAGCTGTCTAATAGTCCGTTTACCCAGGCGGTGGGGACTTTGGGACACTCATTGCGGTTAAGCATCTGGTATATGGCGGTTGCCCACTCGTAGGGGTCGGGTTGTCACGTCAGCAGTCGCCGATTTCATGCTCGGATCATCGCAGAGCCGGTAGATATAATCGAGATAAGGCATCACTCAAAGAAGTGCTGTTTGCCGATAAGGTAGTTCTATCATGGCGGATTGCTGTGTGTCCTCGCCCCAAGTGAAACCATCCGCTACCTCTCGTTTCGCTTTACAATCTGTTAGTGTTTGGCTTTCTTACAGGATGCCGGTTTCCCCAACGCTGACGGCCATGCCTTATGGGCTCCACCAGTCAGGCGGTTTCCACAAGCTGCTGACAGCGGAGGAAACCTTTTCTAGATCCACCCACTTCTAGCCCTGATAATCTTCAACGCAGCCGATTATGTCTTCTACAACCGGTATAGCTGGCCCGAGTTCCCTCCAGCCGAGGTGCAGCGTCTAATCTTATACGCACCCTCAGCAATCTAGCCACTGTGAAATGAAATTGTACGTTTGTTGAGATAACGTCTGGCCTCCTGGCTGCGGGAGTCTCAAAGCACTGGCCATGATACTTGTACGTGATGGAGAAATCGAGACCCCGAGATACCTACGTCCTACGGTCGCTCCGGATACTTGTTCGTCTGTTTATTATACCACTCTTGAGGCCTGTGCTATTGACCGCTGATTGTTCCTTATAGTAACCCAAATACCAAGACCAAAACGTGATGGTACATCGCCGTATGAATTACTCTCTGTCTCTTTCCCTCTACCAGCGTGTCATATTTTACCGATGCAGCTAATCGACACGCTTACATGACCTGCCCACTGAGTAAGGCACGCCCTAGCATTGGCATCTACGCTCACCGAAGAATTGCCCTGGAGGCTTGACGAACTGCTGCCTTTTAGAAATCTAGGGCGGACCTACATAATGGAGGGCTTTGGATAACTTT"

k_dic = {
"A": [0.303, 0.263, 0.276, 0.289, 0.237, 0.237, 0.368, 0.316, 0.224, 0.25, 0.224, 0.197, 0.303],
"C": [0.276, 0.25, 0.184, 0.263, 0.276, 0.263, 0.263, 0.158, 0.25, 0.237, 0.329, 0.316, 0.237],
"G": [0.25, 0.184, 0.237, 0.276, 0.276, 0.25, 0.184, 0.276, 0.224, 0.211, 0.171, 0.237, 0.211],
"T": [0.171, 0.303, 0.303, 0.171, 0.211, 0.25, 0.184, 0.25, 0.303, 0.303, 0.276, 0.25, 0.25]
}

print(most_probable(input,13,k_dic))