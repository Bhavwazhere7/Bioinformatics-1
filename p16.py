#Greedy Motif Search With PseduoCounts

def all_poss_kmer (seq,k):
    kmer_arr = []
    for i in range(0,len(seq)):
        new_seq = seq[i:i+k]
        if len(new_seq) == k:
            kmer_arr.append(new_seq)
    return kmer_arr

def most_probable (seq, k, matrix):
    kmer_arr = all_poss_kmer(seq,k)
    dic_kmer = {}
    probable = []
    for kmer in kmer_arr:
        score = 1
        for i in range(0,k):
             score *= matrix[kmer[i]][i]
        dic_kmer[kmer] = score
    for key in dic_kmer:
        if dic_kmer[key] == max(dic_kmer.values()):
            probable.append(key)
    for kmer_2 in kmer_arr:
        if kmer_2 in probable:
           return kmer_2
    

def score (seq_arr,k):
    score_arr = []
    dic_nt = {"A":0, "C":0, "G":0, "T":0}
    for i in range(0,k):
        for kmer in seq_arr:
            dic_nt[kmer[i]] += 1
        score_value = abs(max(dic_nt.values()) - sum(dic_nt.values()))
        score_arr.append(score_value)
        dic_nt = {"A":0, "C":0, "G":0, "T":0}
    return sum(score_arr)


def matrix_creator(seq_arr,k):
    dic_nt = {"A":0, "C":0, "G":0, "T":0}
    k_dic = {"A":[],"C":[],"G":[],"T":[]}
    for i in range(0,k):
        for seq in seq_arr:
            dic_nt[seq[i]] += 1
        for nt in k_dic:
            k_dic[nt].append(float(dic_nt[nt])/sum(dic_nt.values()))
        dic_nt = {"A":0, "C":0, "G":0, "T":0}
    return k_dic

def greedy_motif(seqs,k,t):
    best_motifs = []
    for seq in seqs:
         best_motifs.append(seq[0:k])
    best_motifs_score = score(best_motifs,k)
    seq1_kmers = all_poss_kmer(seqs[0],k)
    for seq1 in seq1_kmers:
        matrix_arr = [seq1]
        matrix = matrix_creator(matrix_arr,k)
        copy = matrix.copy()
        for key in copy:
            for n in range(0,len(copy[key])):
                copy[key][n] += 1
        for i in range (1,t):
            next_motif = most_probable(seqs[i],k,copy)
            matrix_arr.append(next_motif)
            matrix = matrix_creator(matrix_arr,k)
            copy = matrix.copy()
            for key in copy:
                for n in range(0,len(copy[key])):
                    copy[key][n] += 1
            # print(matrix)
        comp_score = score(matrix_arr,k)
        if comp_score < best_motifs_score:
            best_motifs_score = comp_score
            best_motifs = matrix_arr
        # print(comp_score)
        # print(matrix_arr)
    for ele in best_motifs:
        print(ele)
    return best_motifs


# input = ["GGCGTTCAGGCA",
# "AAGAATCAGTCA",
# "CAAGGAGTTCGC",
# "CACGTCAATCAC",
# "CAATAATATTCG"]
    



input = ["GTGCACCCCAATACACTGTGACAGTACTTGCTTCTTGTTAGCTCGAATGGCGATCGGTAGTAGGGAGAGACGCAGACAGTTAGTTCTAGCCATTGGGATCAGTCTATGAACTCTTGTCTCTTACTAACGCGTATTGGACGTATGGATAGTGTGATC",
"CTCACAGCGTTTAGAAGTTGCTGCACGGGAAAGGGCCCGCCGCGTTCCCTGCGCCCCAATCTCAGTGGTCGCTATCGCCGTGCAGACCATAAGTGGTCATGACTGGGCATGACAGGCACAGAGACGCCGTGCGTCTCTCCAATTAATTTGTCCGGA",
"CAACGCTGAGGATGCAGTGCTTAACTGCGGCCAAATTTCGCCTTTTGCTCAAGCAGTAGTTGCGCGCGTTAGAACATATAGGTTTTTTATCATTGTCCCATTAGCTCTGACAACATAGTCGCAAACCTTAAGAAGCTCTTATAGTAGGGAGTTACA",
"CGGCTTAATAACTCAAGCTATTCTGCTATCCAGCTAAGGCAATCGACCGTAAGCCTATCTCCTGCCACCAACGCGAACGCCGTCATGCGTCCTAATCTGCACCTACCGCCGCTACTTAGGGTGAATGGTGCGCGTCTTCTATAAATACATGAATGC",
"CGAGTGCAGAAACGAGCACACTTCTCATAGACCCAAGTGCTCCCTAATAGCCCACCCGCGGCTTAGTAGAGCATCCTTCCCGGTGATGAGAATAGCTTGCGCGAATGGCTAAGAACTGATAGAAAACCACTATCGATTAGACTTCCTCACTCTCGG",
"GGCACCTCTACAGTTATGCCTTTTTTGCGGACTAGCAAGTATGAAGACTTGCATCCCAATTCCAGGTGGCAGCAAGTCTTACGAGCTGAAATGCTAAGTTTCCCTGAGCGTTATTCCAGATGGGTGCGGGGAACAAACTAAGAGTTTGACGCGGAA",
"CATTAAGTGTCACGATCTAGTAAGTGAGGAACTCTGCTCTTGTTCACGCTGCGACCGAATTCTCCCACTTACCGAAGAACAAGTGCTAAATTGCCACATCGTCCGTGAAGCTTGAGCGAGTGTAGACACCGTGACCCTGAAAGTTGACTACAGCGC",
"TTGCCCCCCAATATAGGTCTGCGATGCGTGGCTTACGCAGGTTATCGACCAATGACGGGTAAAGCAAATGTCGGCTCCGTGCGGAGCATATGGGATACCATTATTCTCTTACTAATCAAATTGCCTGCAGTAGCGTTGGGGACTCCTTCCCGAGTG",
"AGTGGTAAGGCTGGTGCTAAAGGAAGAGGTTTCCCAGAGGGGAATTTAAATACACAGCCAGCGTAGTATCAGAAACCTCGCGGCTAGGTGTATCACAGAAGCAGCAGGGACAAGATAAGGTTGCTGCCAAATAACCAGTACTCATGGCTTCTATGT",
"TGCTGCACGAATCGTTTACGCCATGGAAATGCTGCGCTGCACCCAAATCTGACGGGTCGTAGGACTATCAGACTCAGCAAATCCCGTCTGTGCGGCATCGGTGACATCTCCCACGGGAGCCTCTCCTGTTGTGACCGAAAAATCATCCAACTTAAA",
"GCTCCTAGCTAGCTTACAGATTAACGACAAAGACACCGGTATGCCAGGTACTTCTCGTAGGTGCTTCCTAATAATCAACCTAGACATCCTGTTGGCCTTATCCACATCTTGTTCTCTTGATAGGCCCACGTGGCACTGTGATTTGTATGTCGGATG",
"CCGGGGGGTGTCCTTAGAAGAGAACTGCAACCGAATGCAACACGGCCGAGGACTTTAGAAGGAATAATTAGCCGAGAATGTCTAGGTTTACGGCAGCGCCCCATAGTTTATATAAGACAGGGCTCCTATGCGGAGATCGGGTCTCACTTGCAAGCA",
"TCGCAGCAGACCCCGTAAAATTGCGCAGAACGAGTGTTGCTCCCAAATCGGGCAATGACACCAACTATGCTGGTGTTAAACACGTTTGCACAGCGGCTCTAGTAGGACCTCTAGGTGCGTAACAGTATTGGGGTACGTCGCTAGCTGCCGCGTTTA",
"CTTGCAAGTATATAGCTACGCAAACAGGTCTATCTGGAGATCCATGCGGATCTTAACTATTTGTGGACCAGCCCGAACATCAGTGCCACGATTGTGCAGACGCGCGTAGCCGCAGACCAGTTGCAGCCGAATCGGCGCACGTCACCGTGGTCGCCC",
"AGATTCACATAATTGGTATCAAACACTATAGCAGGTTATCATACATGCACACCCTAATTAGCCGGATCTTGCGAATGCAAACAGGCAGTGGAAAAACTGCACCCTAATACGATTAATAACCGGTCCACCCTCCTAGCAGTTGTCCCATTCAGGAAT",
"GCCGTGTCGTCGAGTGGCTGGGGGGCGAGAGCATAATACCTACCCCCCGGGAGTGCGGCTTCAGAGCACAAGCTATCCGAGGGCTTCACTTATCTTGATCTTTACTATGCGGTGTGCATTATAGGCACACCATTGCCTCCAAATACTCGGGTGTAT",
"ATCCGTGGAGTCGTTTGTCATCCGGTTAAATTGGGGTGCCACCTGCGTACCAACTTGCCCATAAAGCCGCAGGACCCACGTGAAGTGCTTCCCAATCAGGCAATCTATTATGGAGCACCCCCTGTCCCATTGGGCAGGCTCCTATCGGTAGTGTGA",
"AGAGTCTGCCCAGCGGCTTACGATATGCGACCCAATGCGGCACCAGTAGATGGCCGATAATGCTATCCGGATAAAATAACACTTGCGTTCCGGCGTAACGCATGCTGACCGGAAACTACCTGGGAGACCGTGTACATTAAGGTTAGGGCAATAGTT",
"AATGATTGCGGAGCAGCTAGCCGCAGTCGCTGTGGATGTAGAACGGCTTAGGCATGGTAACATCCACGCACAACCGAGTATAAGGTGCTGCCCAATCGCTGGTCGCGCTGATAGTCTTGGGGAAAAGAGATAATACCACACTCTACTCAGTTAGAT",
"CATAATCACGCCTCAGGTTCTTGCAGAAATGTAATGATGCTGCCAAATTGTATGGAGCCCCATCAAATCCAATACCTCGCTTAAGGGGTGCTTTCGACAATTCGGAATTGCTACCCGTACTGGGCGTATAGAGCTCCTATGTTCATTATGAGCTCG",
"TAGACCTTCCACAGGCTTCGAAGGTGCTGGTATCTTCTTCTACGGACATATAGCTCACATTGTACGTACTCACCATAGTTCTTCTTGCTGCCTAATACCAGGCGCAGAGTCCTATTGCGAGATCGTAAGTCAGCAGCCCGAACTCACCTGTCGGAA",
"AAGTGGCATCAAGGCCCTGTTGAGCTACACGTCACTATCGACAAACGATGGTGCTTGTACCTCCAGAGCAGCAGATCGGGCAGGCCCAAACGTGGCTCGACCATCATGTTGCCACCGAATTCACCGACGACGAGGGCAGGCGAAGTATATATTTGG",
"CCCGAGTCTAAACTCTGCTAGAGGCGTTCCATAGTTCCGCCCATGGTGGCGTTGGTGAGCAGACAGCGACCCGGCCTTATAGCTAGGGATGCCATGATGCCGCCAAATCTAGGTTTTACCACATGGCAGACGATGTGGTATAATTTCTGCCCTTTA",
"TCGACGGTTGGGTAGCTAACTGGCGTGTTTTCACTCTTAAACGCACCGAACTTAGGTCGGAGGTTGCGTCTGGATCAGGTAATTCTTTGTAAAAAGAGATATACGGACATTACCGCATTGGTGCTACCGAATATAACTAATGGACTCAATTCATGC",
"CGGGCGATGTCATTCTATTAGTCATAAAGGGATGGATTTTCCACAGGGGCGTCCACTGCCCAACAGAAATGTATGCTTCCTAATACAACCGACGGCCAACGAAGACGCAGAGTAGTCTTCAATCGGGGTAGACACTACACCTTTGAAAAACGGCCA"]
print(greedy_motif(input,12,25))
