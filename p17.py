#Randomized Motif Search
import random

def all_poss_kmer (seq,k):
    kmer_arr = []
    for i in range(0,len(seq)):
        new_seq = seq[i:i+k]
        if len(new_seq) == k:
            kmer_arr.append(new_seq)
    return kmer_arr

def score (seq_arr,k):
    score_arr = []
    dic_nt = {"A":0, "C":0, "G":0, "T":0}
    for i in range(0,k):
        for kmer in seq_arr:
            dic_nt[kmer[i]] += 1
        score_value = abs(max(dic_nt.values()) - sum(dic_nt.values()))
        score_arr.append(score_value)
        dic_nt = {"A":0, "C":0, "G":0, "T":0}
    return sum(score_arr)

def matrix_creator(seq_arr,k):
    dic_nt = {"A":0, "C":0, "G":0, "T":0}
    k_dic = {"A":[],"C":[],"G":[],"T":[]}
    for i in range(0,k):
        for seq in seq_arr:
            dic_nt[seq[i]] += 1
        for nt in k_dic:
            k_dic[nt].append(float(dic_nt[nt])/sum(dic_nt.values()))
        dic_nt = {"A":0, "C":0, "G":0, "T":0}
    return k_dic

def most_probable (seq, k, matrix):
    kmer_arr = all_poss_kmer(seq,k)
    dic_kmer = {}
    probable = []
    for kmer in kmer_arr:
        score = 1
        for i in range(0,k):
             score *= matrix[kmer[i]][i]
        dic_kmer[kmer] = score
    for key in dic_kmer:
        if dic_kmer[key] == max(dic_kmer.values()):
            probable.append(key)
    for kmer_2 in kmer_arr:
        if kmer_2 in probable:
           return kmer_2

def randp (seq_arr,k):
    current_motifs = []
    for seq in seq_arr:
        kmer_arr = all_poss_kmer(seq,k)
        random_num = random.randint(0,len(kmer_arr)-1)
        current_motifs.append(kmer_arr[random_num])
    best_motifs_score = score(current_motifs,k)
    best_motifs = current_motifs[:]
    flag = True
    while flag:
        matrix = matrix_creator(current_motifs,k)
        copy = matrix.copy()
        for key in copy:
            for n in range(0,len(copy[key])):
                copy[key][n] += 1
        current_motifs = []
        for seqi in seq_arr:
            current_motifs.append(most_probable(seqi,k,copy))
        current_motifs_score = score(current_motifs,k)
        if current_motifs_score < best_motifs_score:
           best_motifs_score = current_motifs_score
           best_motifs = current_motifs[:]
        else:
            return best_motifs



def random_algo(seq_arr,k,t):
    i = 0
    last_motifs  = randp(seq_arr,k)
    score_last_motifs  = score(last_motifs,k)
    while i < 1000:
        best_motifs = randp(seq_arr,k)
        score_best_motifs  = score(best_motifs,k)
        if score_best_motifs < score_last_motifs:
           last_motifs  = best_motifs[:]
           score_last_motifs = score_best_motifs 
        i +=1
    print(score_last_motifs)
    for ele in last_motifs:
        print ele
    return last_motifs

 

input = [
"TGTGGGACCACCAGTGCTAAAAATTCTTCCCTACGGAAGCCGACGTCACCCACCTAATGGACCTATAGGCGGTCTGTGCTATCAAGGCTGATGTGCCTGGTAAGTTGGAGCGTAGATGAAGTGCACCCACGCGATATAGCGGTACGTACGAGAGACTAGGGCCACCTCGTTATGTGGGACCACCAGT",
"GCTAAAAATTCTTCCCTACGGAAGCCGACGTCACCCACCTAATGGACCTATAGGCGGTCTGTGCTATCAAGGCTGATGTGAAACGATCCACTGAGCCTGGTAAGTTGGAGCGTAGATGAAGTGCACCCACGCGATATAGCGGTACGTACGAGAGACTAGGGCCACCTCGTTATGTGGGACCACCAGT",
"TGAAGGAGTCTGTTATATTGGCATATCCCAACCTTCAGCTTTATGCAGAGAAGGTTAGAGTAGTTAGTATACTTTACCTTTTAAGTGAAAAAAATCAAACACTGAGTCAAATGGGACTGCGGCAGATTCCGACTTGACAATTATGGGTCTGAGAAGTATCACTGAGTCGTCTTCACGTATATTCAAC",
"GACAACAAAGTATTGCGTACAGTGCCGCAGAATCGTCATGTCCTAAGCTCTTGCAGCCTTAATTCCAACGTCCAGAACAACCCGAAGACACCGGCAAGACAAGAGTTCCGTTCTACAGTTAGTAGCTAACAAAGAAGAAATCTTCCTACGAGCTATTCGGTCCGGCACTCCTGTCGTCCTACTCACT",
"TCATATCCGAAAAGCTGGACGATTCGGGGGGGGCGAAAAGTTGTCTCACTGCGGGTTGGGACTATTTCCCCGAACTTCAGTGTTGTCGAGGTGGGAGGCGAATATTTAAATCTGAGACTGAGTTGACCGGGTCCGATGAAACAAACATCCACTCTGCCTGTACCGCTTGCTAGGTATGACGACGCTA",
"GGCTAGACCATGCTTCAATACGGCTGCCGGTTTGGATTCCGAGCCGTAAATCTTCCACAAGGTAGTAGTTTGGTGTGCCTATTTGTCATTGCCAATGACCTCGCGGCCTCATATTAGGCGGAAGATGCGTATCGGGGATGGTTGTCGTTTAAAATCATTACGTACTTGGTGTCTCGGCTGGTTCCTC",
"TGACGTGAGTAAATATTCTGCCGAGCCCGCCAAAAGTGTTCTTTAGGGATCGTAGCAACGTATTAAGGGAGAGGTCGGTCTGGGAATACGGGAATAGCGGGCCTTATGCGCGTCTCCCGTGAGCCGCCAAACATAGATATCTGGGACACGATCGTGGGGCGTAGCAGCAGGAAACTCTCCACTGAGT",
"CTCCATTGTTAGGGTTGATAAGCGTGCCGGTCTGCAACGCGATCGTAGGGCTGAGATCGAAATCTTTGCCTGAGCGTTCAGCTCCCTTCGCGGGTTCCATCACTTACAAAAGGTCAGAATACAATTTTGGGCTGCGGCTCTTAAGCGAATTCTACAGATAAGATTAAGCGGGGAGTAAACAATACGG",
"GAAGAATACCCGCCTCAGCCCATACTACCGTTACTTATAGGTCCCGTGGTATCGCCCCAAAAATGTGGGCCTCCACGGGTGCTTATCCGGCGAGAAAGCCAACGGTGTAAGCGCTCGTGAGCCTGAGAGCACTAAATCAATCACTGAGTGATGTCTCAACGGAACGCTGATATTATAATAGGTGTCT",
"TGTCCTGGGACCGGAGTAACTCCGGTAGCGCGTACGGGCTAATGGTAGAAACTCGGGAGCTAGTAAGTTTCTCGCAAAAAGGAGTGAGTAGCACACATGGCCAGAATCGTCAGTAAATCTTCCAGATAGGAGAAAGTGCGGCTGCGGCTGTTTCACAAGTTGACTTCTTTGAGACAATAAAGAGAGG",
"AGCGATCCTGGCTGATCCAGCCCGGCTTACGTCGTACCACCGGGAACATACTAGAGCTCGTGAGGAAGTTTCCTGGGTCAGGAGATTTTATCAAATCTGATACTGAGCCTAGACTAATCTCTATCTTGCTTTTATCCACTCTCTTGTAGGACCAACATCGATGTGCTACAAACAGCACCTTTTGTGC",
"GACGCGCAGTTCATTTAGGGAATGCTGATTCGGGTCTCTTCCACTGAGTACCGGGGGATAAGCGGGTGGGGTCTATTTCACAAATGCTCGTATGTGACGCCACCGGTAATGATGCTTAACTTATCAAGAGTGTCCAAACGCCGGCTCTTTTTCGCGATTGCTGATGGAACTCGGCCTTTGAGATTGA",
"ACAAAATCTTCCACTCGAGTCTGGAGTACGGTCGTAAAGCAACATCCTTTAATTGTCGGGTTCAGCAATCCTACACAGGCTCGTGAGGCACTCATTAGACTTACCCCGGGGAAAGATAGCTATACAACTCTTACCAGGATGGGCGTCCAAGCACGTCCCGTGCACCCATCGGGAAAAAGAAAAAGAG",
"ATTAAATTGCCCACTGAGACATTTAATTGATGTCGACAATCACGCGTTGGCATGGGAATTGGGTCCCGACGCGCCTACGAAGTTCCATGAGACTCGCAGCGTGGGATGGTACCCCTCGACTATCAGTGATCTTTCTTCAATAGGCACTAATTGGGTCCAAGGTGACCACACAGGTCGACCCGCCAGC",
"CGCCTCATCGTTATGCACGTAGACCCATAAACATCGGGCGACCCAGACGTTATACACTTACAACGTACCGATGCTCTTGGCGAATCCGGCGGATATAGATAAATCTGGCGATCGCGGATTAATACCTCGGCCGTGCCGCCGGCGAGACACAAAGCACTCAATGTTAAAACCTTTCCACTGAGTTCCG",
"ACCCGCTTTTCCATTGTGGTATAATCTTCCACTGGAAGAAAGCCTCAGTAATTCACTCTATGGTATTCGAAAACAACACCAGCGCGGTGTCCTGCATCTCCTACGTCCGCAAGTGCCGACTAAAAAGACTTGATCCGGAAATATGCTTGATACACGGGTCGGGGCCCGGCTGCTATCATCTAAGCTC",
"GAGATGGCTCCGGGAGTGTTCTTGCTCGCGCCGGACCACGGGTGACGTTAGGGAGTATCGGCTGTGCACTCCCACCTAGAACCACGGAACCGGTACGCATGCCTTCCACTGAGAACGTAGTCCCTTCAGCGTGCTGCGTACGCGACCTTAATCATAGCATAAGTCAGACCACCTTATGCCTAATTCT",
"ATGACGTGTTCCTCCGCAATAGAACTCGACATAGCACTTGAACACCTTGGGGCGGTTGGATTCTAATGGTCCCTGTGTGATCTTCCACTGACCCCTGGGAGTACCCAGTTATTGGCTCTCATGCTACTGCCTTCTGGGTCGATGAAATTACAAGGTCAGCAGTAGTCTCTCAGGAGGTTTTTTGCGG",
"TGGAACAGAGCAAGTAGGGTTGAACGTATTCCAGTCTTTGAAACTTCTACTAGGGTATGTTGATTAACCTTCGATGGAGGGTGGGTAATTCAACCTAAATACACCACTGAGTAGGATTACTCACACTTGACAATGGGTTGCTGACTCTAACGGAAGGTTCATGACAAGAGATGTCGCAGGCCGCCTG",
"TCCATGTCGTCCGAGCCCTCTACTGTGCTGTCCCCGGGGGTTTGACGACGATTTGGATCGATCGATGTCAGGATGGTGACCGATACTGAAATGAAAATCTTCGTTTGAGTGTCCCTGGTTGATAGTACGCGGGATTACGGGCTCAGGCGTAATCCCGCCGCAGAGAGTAGCTTTCACACGATGAGTA"
]


# input = [
# "CGCCCCTCTCGGGGGTGTTCAGTAAACGGCCA",
# "GGGCGAGGTATGTGTAAGTGCCAAGGTGCCAG",
# "TAGTACCGAGACCGAAAGAAGTATACAGGCGT",
# "TAGATCAAGTTTCAGGTGCACGTCGGTGAACC",
# "AATCCACCAGCTCCACGTGCAATGTTGGCCTA",
# ]

print(random_algo(input,15,20))